var searchIndex = JSON.parse('{\
"migrate":{"doc":"<code>migrate</code> CLI entrypoint","t":[3,11,11,11,11,11,11,11,11,11,11,11],"n":["MigrateCli","borrow","borrow_mut","fmt","from","from_cli_args","into","run","try_from","try_from_cli_args","try_into","type_id"],"q":["migrate","","","","","","","","","","",""],"d":["Contains the arguments parsed from the command line of …","","","","","Reads the command line parameters of the current process …","","Example of a database migration:","","Build the migration context from the cli arguments that …","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["planbuilder",3]]],[[],["result",4]],[[],[["box",3],["result",4]]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"MigrateCli"]]},\
"migrate_core":{"doc":"Core crate that exposes APIs designed for full …","t":[13,16,16,13,8,8,4,3,4,13,3,3,3,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12],"n":["Commit","Ctx","Ctx","Down","Migration","MigrationCtxProvider","MigrationRunMode","MigrationsDisplayBuilder","MigrationsSelection","NoCommit","Plan","PlanBuildError","PlanBuilder","PlanDisplayBuilder","PlanExecError","Up","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","builder","clone","clone_into","create_in_commit_mode","create_in_no_commit_mode","ctx_provider","display","display","down","exec","fmt","fmt","fmt","fmt","fmt","fmt","force_lock","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","migration","source","source","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","up","inclusive_bound","inclusive_bound"],"q":["migrate_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","migrate_core::MigrationsSelection",""],"d":["Commit changes to the migration target while executing …","The type this provider creates. There must be only one …","Defines context type injected for migration during its …","Run reverse migration logic that cancels actions done in […","Contains behavior of a single migration that may be …","Gives methods for creating the context for the migration. …","Behavioral toggle for the migration execution","Contains configuration information to render the […","Selects direction of the migration as well as the …","Don’t commit any changes to the migration target, just …","Contains a fixed snapshot of migration state and list of …","Error returned as a result of <code>PlanBuilder::build()</code>","Builder for [<code>Plan</code>] to allow its convenient configuration","Contains configuration information to render migration […","Error returned as a result of <code>Plan::exec()</code>","Run forward migration logic","","","","","","","","","","","","","","","","","Finish building migration plan.","Finish configuring how [<code>PlanBuilder</code>] should be rendered","Finish configuring how [<code>Plan</code>] should be rendered","Returns a builder for this [<code>Plan</code>] to allow its convenient …","","","Create context for real migration. All changes that will …","Create the context for no-commit (or dry-run) migration. …","Register [<code>MigrationCtxProvider</code>] that will be used to …","Create builder for rendering the current migration …","Returns a builder that will allow for configuring how …","Similar to [<code>Migration::up()</code>], but applies migration logic …","Execute migration plan by running migration scripts.","","","","","","","Use forced stack lock. Beware that setting it to <code>true</code> is …","","","","","","","","","","","","","","","","","Append [<code>Migration</code>] to the list of migrations configured …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Run forward migration logic. To perform the execution …","Defines upper inclusive bound for the migrations that …","Defines lower inclusive bound for migrations that should …"],"i":[1,2,3,4,0,0,0,0,0,1,0,0,0,0,0,4,5,6,7,8,1,9,10,4,5,6,7,8,1,9,10,4,5,7,8,6,1,1,2,2,5,5,6,3,6,1,9,9,10,10,4,5,5,6,7,8,1,9,10,4,5,6,7,8,1,9,10,4,5,9,10,1,9,10,5,6,7,8,1,9,10,4,5,6,7,8,1,9,10,4,5,6,7,8,1,9,10,4,3,11,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["migrationsselection",4]]],[[]],[[]],[[],["planbuilder",3]],[[],["migrationrunmode",4]],[[]],[[["box",3]],[["box",3],["pin",3]]],[[["box",3]],[["box",3],["pin",3]]],[[]],[[],["migrationsdisplaybuilder",3]],[[],["plandisplaybuilder",3]],[[],[["box",3],["pin",3]]],[[["migrationrunmode",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["error",8]]],[[],[["option",4],["error",8]]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["box",3],["pin",3]]],null,null],"p":[[4,"MigrationRunMode"],[8,"MigrationCtxProvider"],[8,"Migration"],[4,"MigrationsSelection"],[3,"PlanBuilder"],[3,"Plan"],[3,"MigrationsDisplayBuilder"],[3,"PlanDisplayBuilder"],[3,"PlanBuildError"],[3,"PlanExecError"],[13,"Up"],[13,"Down"]]},\
"migrate_state":{"doc":"Traits related to migration state storage.","t":[6,8,8,8,10,10,10,10,10],"n":["Result","StateClient","StateGuard","StateLock","client","fetch","lock","unlock","update"],"q":["migrate_state","","","","","","","",""],"d":["Type alias for the [<code>std::result::Result</code>] type used in the …","Client for the migration state storage.","Object returned from [<code>StateLock::lock()</code>] that holds state …","Lock over a migration state storage.","Returns the [<code>StateClient</code>] to be used to access the …","Return all bytes stored in the storage.","General concept","Unlocks currently held migration state lock allowing for …","Puts given bytes into the storage."],"i":[0,0,0,0,1,2,3,1,2],"f":[null,null,null,null,[[],["stateclient",8]],[[],[["box",3],["pin",3]]],[[["bool",15],["box",3]],[["box",3],["pin",3]]],[[["box",3]],[["pin",3],["box",3]]],[[["vec",3],["u8",15]],[["pin",3],["box",3]]]],"p":[[8,"StateGuard"],[8,"StateClient"],[8,"StateLock"]]},\
"migrate_state_dynamodb":{"doc":"Implementation of storing migration state in an AWS …","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DdbStateLock","DdbStateLockBuilder","borrow","borrow","borrow_mut","borrow_mut","build","builder","from","from","into","into","lock","partition_key_attr_name","partition_key_attr_val","payload_attr_name","sort_key_attr_name","sort_key_attr_val","try_from","try_from","try_into","try_into","type_id","type_id","with_builder"],"q":["migrate_state_dynamodb","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Implements [<code>StateLock</code>] storing migration state in an AWS …","Builder for [<code>DdbStateLock</code>] object, see its methods for …","","","","","Consume the builder and return final configured […","Returns [<code>DdbStateLockBuilder</code>] to configure and create an …","","","","","","Override partition key attribute name used for the stored …","Override partition key attribute value used for stored …","Override payload attribute name used for stored migration …","Override sort key attribute name used for stored …","Override sort key attribute value used for stored …","","","","","","","Same as [<code>DdbStateLock::builder()</code>], but accepts third …"],"i":[0,0,1,2,1,2,1,2,1,2,1,2,2,1,1,1,1,1,1,2,1,2,1,2,2],"f":[null,null,[[]],[[]],[[]],[[]],[[],["ddbstatelock",3]],[[],["ddbstatelockbuilder",3]],[[]],[[]],[[]],[[]],[[["bool",15],["box",3]],[["pin",3],["box",3]]],[[]],[[["attributevalue",3]]],[[]],[[]],[[["attributevalue",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]]],"p":[[3,"DdbStateLockBuilder"],[3,"DdbStateLock"]]},\
"migrate_state_file":{"doc":"Implementation of storing migration state in a file on …","t":[3,11,11,11,11,11,11,11,11,11],"n":["FileStateLock","borrow","borrow_mut","from","into","lock","new","try_from","try_into","type_id"],"q":["migrate_state_file","","","","","","","","",""],"d":["Implements [<code>StateLock</code>] storing migration state in a file …","","","","","","Creates migration state file storage. Accepts the file …","","",""],"i":[0,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[]],[[]],[[["box",3],["bool",15]],[["box",3],["pin",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"FileStateLock"]]},\
"migrate_state_test":{"doc":"Provides already-written tests for implementations of […","t":[5,5,5],"n":["locking","run_all","storage"],"q":["migrate_state_test","",""],"d":["Test correctness of locking mechanism that [<code>StateLock</code>] …","Run all the available tests for the given state storage …","Test correctness of data storage [<code>StateLock</code>]"],"i":[0,0,0],"f":[[[["fn",8]]],[[]],[[["box",3],["statelock",8]]]],"p":[]},\
"xtask":{"doc":"","t":[0,5,5],"n":["pre_commit","install_hook","run_hook"],"q":["xtask","xtask::pre_commit",""],"d":["","",""],"i":[0,0,0],"f":[null,[[],["result",6]],[[],["result",6]]],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};